import dotenv from "dotenv";
import Logger from "./middleware/logger.js";

// Load environment variables
dotenv.config();

const checkEgyptTime = () => {
    try {
        Logger.info("=== ูุญุต ุงูุชูููุช ุงููุตุฑู ูุงูุชูุฑูุฑ ุงููููู ===");

        // ุงูููุช ุงูุญุงูู
        const now = new Date();

        // ุชูููุช ูุตุฑ (UTC+2)
        const egyptTime = new Date(now.getTime() + 2 * 60 * 60 * 1000);

        Logger.info("1. ุงูุชูููุช ุงูุญุงูู:", {
            localTime: now.toLocaleString("ar-EG"),
            egyptTime: egyptTime.toLocaleString("ar-EG"),
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        });

        // ุญุณุงุจ ุงูุชูุฑูุฑ ุงููููู ุงูุชุงูู (11:59 ูุณุงุกู ุจุชูููุช ูุตุฑ)
        const nextDailyReport = new Date();
        nextDailyReport.setHours(23, 59, 0, 0); // 11:59 PM

        // ุฅุฐุง ูุงู ุงูููุช ุงูุญุงูู ุจุนุฏ 11:59 ูุณุงุกูุ ุงูุชูุฑูุฑ ุงูุชุงูู ุบุฏุงู
        if (now > nextDailyReport) {
            nextDailyReport.setDate(nextDailyReport.getDate() + 1);
        }

        const timeUntilNextReport = nextDailyReport.getTime() - now.getTime();
        const hoursUntilNextReport = Math.floor(
            timeUntilNextReport / (1000 * 60 * 60)
        );
        const minutesUntilNextReport = Math.floor(
            (timeUntilNextReport % (1000 * 60 * 60)) / (1000 * 60)
        );

        Logger.info("2. ุงูุชูุฑูุฑ ุงููููู ุงูุชุงูู:", {
            nextReportTime: nextDailyReport.toLocaleString("ar-EG"),
            timeUntilNextReport: `${hoursUntilNextReport} ุณุงุนุฉ ู ${minutesUntilNextReport} ุฏูููุฉ`,
            egyptTime: nextDailyReport.toLocaleString("ar-EG", {
                timeZone: "Africa/Cairo",
            }),
        });

        // ุนุฑุถ ุงูุฌุฏููุฉ ุงูุฒูููุฉ
        Logger.info("3. ุงูุฌุฏููุฉ ุงูุฒูููุฉ (ุจุชูููุช ูุตุฑ):");
        Logger.info("   - ุงูุชูุฑูุฑ ุงููููู: ูู ููู ูู ุงูุณุงุนุฉ 11:59 ูุณุงุกู");
        Logger.info("   - ูุญุต ุงููุฎุฒูู: ูู ุณุงุนุฉ");
        Logger.info(
            "   - ุงูุชูุฑูุฑ ุงูุดูุฑู: ุขุฎุฑ ููู ูู ุงูุดูุฑ ูู ุงูุณุงุนุฉ 11:59 ูุณุงุกู"
        );
        Logger.info("   - ุชุญุฏูุซ ุงูููุงุชูุฑ ุงููุชุฃุฎุฑุฉ: ูู 6 ุณุงุนุงุช");
        Logger.info("   - ุฅูุดุงุก ุงูุชูุงููู ุงููุชูุฑุฑุฉ: ูู ููู ูู ููุชุตู ุงูููู");
        Logger.info("   - ูุณุฎ ุงุญุชูุงุทู: ูู ุฃุณุจูุน ููู ุงูุฃุญุฏ ูู ุงูุณุงุนุฉ 2 ุตุจุงุญุงู");
        Logger.info("   - ุชูุธูู ุงูุฅุดุนุงุฑุงุช: ูู ููู ูู ุงูุณุงุนุฉ 3 ุตุจุงุญุงู");

        // ุงูุชุญูู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
        Logger.info("4. ุฅุนุฏุงุฏุงุช ุงููุธุงู:");
        Logger.info(`   - NODE_ENV: ${process.env.NODE_ENV}`);
        Logger.info(
            `   - EMAIL_HOST: ${
                process.env.EMAIL_HOST ? "ููุนููู" : "ุบูุฑ ููุนููู"
            }`
        );
        Logger.info(
            `   - EMAIL_USER: ${
                process.env.EMAIL_USER ? "ููุนููู" : "ุบูุฑ ููุนููู"
            }`
        );
        Logger.info(
            `   - EMAIL_PASS: ${
                process.env.EMAIL_PASS ? "ููุนููู" : "ุบูุฑ ููุนููู"
            }`
        );

        Logger.info("โ ูุญุต ุงูุชูููุช ุงููุตุฑู ููุชูู!");
        Logger.info(
            "๐ง ุงูุชูุฑูุฑ ุงููููู ุณูุฑุณู ุชููุงุฆูุงู ูู ุงูุณุงุนุฉ 11:59 ูุณุงุกู ุจุชูููุช ูุตุฑ ูู ููู"
        );
    } catch (error) {
        Logger.error("โ ุฎุทุฃ ูู ูุญุต ุงูุชูููุช ุงููุตุฑู:", {
            error: error.message,
            stack: error.stack,
        });
    }
};

// ุชุดุบูู ุงููุญุต
checkEgyptTime();
